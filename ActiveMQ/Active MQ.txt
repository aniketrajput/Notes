
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

https://www.tomitribe.com/blog/5-minutes-or-less-activemq-with-jms-queues-and-topics/


Very nice tutorial - Tutorial copied on desktop as well

Example code in download section.


Below tutorial is goof to see  Hawtio admin dashboard
https://examples.javacodegeeks.com/enterprise-java/jms/activemq-tutorial-beginners/


spring boot + jms + activemq. This is used to implement application given by Pratik
https://www.youtube.com/watch?v=yjrS95TMCvg

Nice example with spring boot + jms + activemq - 
https://www.youtube.com/watch?v=zaCXYkzLgJc

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Topic - conference call - Publish-Subscribe
Gabriella dials in to a conference call. While she is connected, she
hears everything that the speaker is saying, along with the rest of
the call participants. When she disconnects, she misses out on what
is said. On reconnecting, she continues to hear what is being said.
This is an example of the publish-subscribe messaging domain. The
conference call acts as a broadcast mechanism. The person speaking
does not care how many people are currently dialed into the call—
the system guarantees that anyone who is currently dialed in will
hear what is being said.

In classical messaging systems, the publish-subscribe messaging
domain is implemented through topics. A topic provides the same
sort of broadcast facility as the conference call mechanism. When a
message is sent into a topic, it is distributed to all subscribed consumers.
Topics are typically nondurable. Much like the listener who does not
hear what is said on the conference call when she disconnects, topic
subscribers miss any messages that are sent while they are offline.
For this reason, it can be said that topics provide an at-most-once
delivery guarantee for each consumer.

Only active subcribers will receive, inactive will lose. If all subcribers are offline the message is lost. In case of queue delivery is gauranteed atleast once, becasue message will be hold by messaing system until a consumer becomes active or online.

Point-to-Point
Alexandra walks into the post office to send a parcel to Adam. She
walks up to the counter and hands the teller the parcel. The teller
places the parcel behind the counter and gives Alexandra a receipt.
Adam does not need to be at home at the moment that the parcel is
sent. Alexandra trusts that the parcel will be delivered to Adam at
some point in the future, and is free to carry on with the rest of her
day. At some point later, Adam receives the parcel.
This is an example of the point-to-point messaging domain. The post
office here acts as a distribution mechanism for parcels, guaranteeing
that each parcel will be delivered once. Using the post office separates
the act of sending a parcel from the delivery of the parcel.
In classical messaging systems, the point-to-point domain is implemented
through queues. A queue acts as a first in, first out (FIFO)
buffer to which one or more consumers can subscribe. Each message
is delivered to only one of the subscribed consumers. Queues will
typically attempt to distribute the messages fairly among the consumers.
Only one consumer will receive a given message.
Queues are termed as being durable. Durability is a quality of service
that guarantees that the messaging system will retain messages in
What Is a Messaging System, and Why Do We Need One? | 3
the absence of any active subscribers until a consumer next subscribes
to the queue to take delivery of them.
Durability is often confused with persistence, and while the two
terms come across as interchangeable, they serve different functions.
Persistence determines whether a messaging system writes the message
to some form of storage between receiving and dispatching it to
a consumer. Messages sent to a queue may or may not be persistent.

In case of queue if consumer is not active messaging system will hold the message until some consumer becomes active and delivers to it. 


Hybrid Models
A store’s website places order messages onto a message “queue.” A
fulfilment system is the primary consumer of those messages. In
addition, an auditing system needs to have copies of these order
messages for tracking later on. Both systems cannot miss messages,
even if the systems themselves are unavailable for some time. The
website should not be aware of the other systems.
Use cases often call for a hybrid of publish-subscribe and point-topoint
messaging, such as when multiple systems each want a copy of
a message and require both durability and persistence to prevent
message loss.
These cases call for a destination (the general term for queues and
topics) that distributes messages much like a topic, such that each
message is sent to a distinct system interested in those messages, but
where each system can define multiple consumers that consume the
inbound messages, much like a queue. The consumption type in this
case is once-per-interested-party. These hybrid destinations frequently
require durability, such that if a consumer disconnects, the
messages that are sent in the meantime are received once the consumer
reconnects.



Its our decision wether we want to keep data or messages in volatile memory like cache or we want to keep them in persist storage like disk. As we know accessing or writing to disk is much slower than volatile memory, performance might affect accordingly. We are using which storage? As the programmer did not want to lose the message if the broker
went down, the JMSDeliveryMode header of the message was set to PERSISTENT(the default behavior).


The JMS API
Before we go into the details of how ActiveMQ exchanges messages
with clients, we first need to examine the JMS API. The API defines
a set of programming interfaces used by client code:

ConnectionFactory
This is the top-level interface used for establishing connections
with a broker. In a typical messaging application, there exists a
single instance of this interface. In ActiveMQ this is the Active
MQConnectionFactory. At a high level, this construct is instructed
with the location of the message broker, as well as the lowlevel
details of how it should communicate with it. As implied
by the name, a ConnectionFactory is the mechanism by which
Connection objects are created.

Connection
This is a long lived object that is roughly analogous to a TCP
connection—once established, it typically lives for the lifetime
of the application until it is shut down. A connection is threadsafe
and can be worked with by multiple threads at the same
time. Connection objects allow you to create Session objects.

Session
This is a thread’s handle on communication with a broker. Sessions
are not thread-safe, which means that they cannot be
accessed by multiple threads at the same time. A Session is the
main transactional handle through which the programmer may
commit and roll back messaging operations, if it is running in
transacted mode. Using this object, you create Message, Message
Consumer, and MessageProducer objects, as well as get handles
on Topic and Queue objects.

MessageProducer
This interface allows you to send a message to a destination.

MessageConsumer
This interface allows the developer to receive messages. There
are two mechanisms for retrieving a message:
• Registering a MessageListener. This is a message handler
interface implemented by you that will sequentially process
any messages pushed by the broker using a single thread.
• Polling for messages using the receive() method.

Message
This is probably the most important construct as it is the one
that carries your data. Messages in JMS are composed of two
aspects:
• Metadata about the message. A message contains headers
and properties. Both of these can be thought of as entries in
a map. Headers are well-known entries, specified by the
JMS specification and accessible directly via the API, such
as JMSDestination and JMSTimestamp. Properties are arbitrary
pieces of information about the message that you set
to simplify message processing or routing, without the need
to read the message payload itself. You may, for instance, set
an AccountID or OrderType header.
• The body of the message. A number of different message
types can be created from a Session, based on the type of
content that will be sent in the body, the most common


When an operating system process, such as a broker, writes to disk,
it interacts with the filesystem. The filesystem is a process that
abstracts away the details of interacting with the underlying storage
medium by providing an API for file operations, such as OPEN,
Caches, Caches Everywhere | 17
CLOSE, READ, and WRITE. One of those functions is to minimize the
amount of writes by buffering data written to it by operating system
processes into blocks that can be written out to disk at the same
time. Filesystem writes, which seem to interact with disks, are
actually written to this buffer cache.
Incidentally, this is why your computer complains when you remove
a USB stick without safely ejecting it—those files you copied may
not actually have been written!

Once data makes it beyond the buffer cache, it hits the next level of
caching, this time at the hardware level—the disk drive controller
cache. These are of particular note on RAID-based systems, and
serve a similar function as caching at the operating system level: to
minimize the amount of interactions that are needed with the disks
themselves. These caches fall into two categories:
write-through
Writes are passed to the disk on arrival.
write-back
Writes are only performed against the disks once the buffer has
reached a certain threshold.

Data held in these caches can easily be lost when a power failure
occurs, as the memory used by them is typically volatile.

More
expensive cards have battery backup units (BBUs) which maintain
power to the caches until the overall system can have power
restored, at which point the data is written to disk.
The last level of caches is on the disks themselves. Disk caches exist
on hard disks (both standard hard drives and SSDs) and can be
write-through or write-back. Most commercial drives use caches
that are write-back and volatile, again meaning that data can be lost
in the event of a power failure.



https://activemq.apache.org/what-is-the-prefetch-limit-for.html

What is the Prefetch Limit For?
One of the design goals of ActiveMQ is to be a highly performant message bus. This means using a SEDA architecture to perform as much work as possible asynchronously. To make efficient use of network resources the broker utilizes a ‘push’ model to dispatch messages to consumers. This ensures that a consumer always has a local buffer of messages ready to process. The alternative would be for consumers to explicitly pull messages from the broker. Pulling messages individually is not very efficient and can increase the per message latency significantly.

However, there is a danger that without limiting the number of messages that are pushed to a consumer its client-side resources could become exhausted. This is the natural consequence of message consumption typically being much slower than message delivery. To avoid this situation ActiveMQ therefore employs a prefetch limit to limit the maximum number of messages that can be dispatched to an individual consumer at once. The consumer in turn uses the prefetch limit to size its prefetch message buffer.

Once the broker has dispatched a prefetch limit number of messages to a consumer it will not dispatch any more messages to that consumer until the consumer has acknowledged at least 50% of the prefetched messages, e.g., prefetch/2, that it received. When the broker has received said acknowledgements it will dispatch a further prefetch/2 number of messages to the consumer to ‘top-up’, as it were, its prefetch buffer. Note that it’s possible to specify a prefetch limit on a per consumer basis (see below).

Large prefetch values are recommended for high performance with high message volumes. However, for lower message volumes, where each message takes a long time to process, the prefetch should be set to 1. This ensures that a consumer is only processing one message at a time. Specifying a prefetch limit of zero, however, will cause the consumer to poll for messages, one at a time, instead of the message being pushed to the consumer.




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

How ActiveMQ - 

Two models - Queue based model and publish-subscribe model.

In queue model the sender pushes the message in queue and receiver will fetch that message from the queue.
In publish-subscribe model publisher publishes the message and there are multiple consumer which will fetch the published message.

How Install ActiveMQ - 
- Download the zip from apache site and extract.
- Go in bin and click on a batch file.. the bus will start. You will see a url in logs for ActiveMQ web console.
- Go to url and click on manage ActiveMQ broker.

Java program - Check eclispe project

Message Consumption - 
In JSM message can be consumed in two ways:
	- Synchronously
		A subscriber or receiver explicitly fetches a message from the destination using the "receive" method.
		
	- Asynchronously
		A client can register a message listener (like an event listener) with a consumer.

===================================================================================================================================================		

JBOSS/WildFly Application Server - 

- Product from JBOSS community. Open Source project.
- JBoss is been renamed as wildfly.
- WildFly 10.1 version.
- JBoss has enterprise (paid) application server also with partnership of Red Hat.
- wildfly.org [Community which keeps on developing the product.]
	They have multipe versions - 
		JBoss App Server 4.x
		JBoss App Server 5.x
		JBoss App Server 6.x
		JBoss App Server 7.x
		WildFly 8.x
		WildFly 9.x
		WildFly 10.0.x
		WildFly 10.1.0

Software Extensions -
	Final Release	//Stable version
	Service Pack
	Candidate Release

	
JBoss on Windows, Linux[Expected]

Linux flavours-
		Red Hat
		Suse
		Oracle Linux
		
Red Hat EAP(Enterprise Application Server) version - 
	EAP 4.x
	EAP 5.x
	EAP 6.1
	EAP 6.4
	EAP 7.0

WildFly is purely Java complaint Application Server. 

S/W Bundles - 

JDK (JRE by default its part of JDK) 
JRE	
	
Java Vendors - 
	Java API is open source owned by Sun Microsystems.
	4 Java Vendors - 
	Sun JDK/Oracle
		Oracle acquired SUN Microsystems only for Enterprise not for open source.
	IBM JDK
	HP JDK
	Oracle JROCKIT
	
Distributed Systems - Distributed systems divide the work among several independent modules.
						The failure of a single module has less impact on the overall system, which makes the system more: Available, Scalable, Maintainable
						

Competitors - 
	WildFly [REDHAT JBoss]
	Oracle WebLogic
	IBM WebSphere
	VMWare TCServer
	Apache Tomcat
	Oracle GlassFish
	
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
JMS is APIs for broker, ActiveMQ is broker. Client and server will use JMS APIs to connect, send, receive message to ActiveMQ broker. 	
	
	
	
	
	
	
	
	
	
	
	